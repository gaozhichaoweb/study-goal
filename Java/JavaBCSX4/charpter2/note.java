第二章 一切都是对象
	2.1 用应用操作对象
		String s;  
		//创建的只是引用，并不是对象
		
		String s = "abc";  
		//创建一个引用并进行初始化
		//java语音特性：字符串可以用带引号的文本初始化
	2.2 创建对象	
		String st = new String("abc");
		//创建了一个引用，并与一个新的对象关联
		2.2.1 存储到什么地方
			寄存器：最快的存储区，位于处理器内部，不能直接控制
			堆栈：位于通用RAM中，有确切的生命周期，某些java数据存储于堆栈中--特别是对象的引用，但是java对象不存储于其中
			堆：通用的内存池(位于RAM区)，用于存储所有的Java对象，不同于堆栈，不需要知道生命周期。
			常量存储：通常直接存放在程序代码内部，安全永远不会被改变。
			非RAM存储：数据完全存活于程序之外
		2.2.2 特例：基本类型
			不用new来创建变了，而是创建一个并非是引用的“自动”变量
			这个变量直接 存储“值”，并置于堆栈中，因此更加高效
			boolean,char,byte,short,int,long,float,double,void
			基本类型都有包装类型如Boolean,Characte,Byte,Short,Integer,Long,Float,Double,Void
	2.3 永远不需要销毁对象
		作用域：
			作用域决定了在其内定义了变量名的可见性和生命周期，作用域由花括号的位置决定
		对象的作用域：
			java对象不具备和基本类型一样的生命周期，它可以存活于作用域之外。
			由new创建的对象，只要你需要，就会一直保留下去
			Java有一个垃圾回收器，用来监视用new创建的所有对象，并辨别那些不会再被引用的对象
			随后释放这些对象的内存空间，以便供其他新的对象使用。
	2.4 创建新的数据类型：类
		class ATypeName{}
		若类的某个成员是基本数据类型，即使没有进行初始化，Java也会确保它获得一个默认值
	2.5 方法、参数和返回值
		基本组成部分：名称、参数、返回值和方法体
		ReturnType nethodName(/*argument list*/){
			/*method body*/
		}
		2.5.1 参数列表
			方法的参数列表指定要传递给方法什么样的信息，这些信息采用的都是对象形式
			因此必须指定每个所传递对象类型及名字
			这里的传递实际上也是引用，并且引用的类型必须正确。
	2.6 构建一个Java程序
		2.6.1 名字可见性
			为了给一个类库生成不会与其他名字混淆的名字，Java设计者希望程序员反过来使用自的Internet域名
			例如：net.ksy.utility
			反转域名后，句点就用来代表子目录的划分
		2.6.2 运用其他构件
			使用关键字import来准确地告诉编译器你想要的类是什么
			import只是编译器倒入一个包
			import java.util.ArrayList;
			import java.util.*;
		2.6.3 static关键字
	2.7 第一个Java程序
		javac HelloDate.java
		java HelloDate
	2.8 注释和嵌入式文档
		2.8.1 注释文档
			/**/和/** */
		2.8.2 语法
			javadoc用于提取注释的工具，输出的是一个HTML文件，可以用web浏览器查看
	2.9 编码风格
		类名的首字母要大写
		如果类名由几个单词构成，那么把他们并在一起，其中每个内部单词首字母都大写
		标识符第一个字母采用小写
		class AllColors {
			int anColors;
			void changeColor(int newHue) {
				//
			}
		}
			
			
			
			
			
			
			
			
	
	
	
	