java从入门到精通p141
第9章：类和对象
	任何实体都可以归属于某类事物，任何对象都是某一类事物的实例。
	9.1 面向对象程序设计的基本概念 
		传统的过程式编程语言是以过程为中心、以算法为驱动
		面向对象的编程语言则是以对象为中心、以消息为驱动。	
		9.1.1 对象
			对象特征分为静态特征和动态特征
			静态特征：抽象为属性，Java语言中称之为变量
			动态特征：抽象为行为，Java语言中称之为方法
		9.1.2 类
			将具有相同属性及相同行为的一组对象称为类
		9.1.3 封装性：
			内部应有明确的范围、清楚的外部边界
			具有友好的界面或接口
			完成、保护和隐藏软件的内部实现
		9.1.4 继承性：避免了对一般类和特殊类之间共同特征进行重复描述
		9.1.5 多态性:多态是运行程序中出现重名现象
			Java语言中含有方法重载与成员覆写两种形式的多态、
			方法重载：在一个类中，运行多个方法使用同一个名字，但方法的参数不同，功能也不同
			成员覆写：子类与父类运行具有相同的变量名称，数据类型不同，允许具有相同的方法名称，但功能不同
	9.2 类
		类是对某一类事物的描述，是抽烟的、概念上的定义
		对象是实际存在的该类事物的个体
		9.2.1 类的声明
			语法：
			class ClassName{
				//类的成员变量
				//类的方法
			}
			一般类名的首字母大写
		9.2.2 类的定义
			class 类名称{
				数据类型 属性;
				返回值的数据类型 方法名称(参数1,参数2...){
					语句
					return 表达式;
				}
			}
	9.3 对象
		类提供的知识一个模板，必须	依照它创建出对象之后才可以使用。
		9.3.1 对象的使用
			类名 对象名 = new 类名();
			创建属于某类的对象，需要两步：
				声明指向"由类所创造的对象"的变量
				利用New创建新的对象，并指派给先前所创建的变量
				Person p;
				p = new Person();
				Person p = new Person();
		9.3.2 对象的使用
			语法：
				访问属性：对象名称.属性名   p.name
				访问方法：对象名称.方法名()   p.talk
			赋值：p.name = "jone";
		9.3.3 对象的比较
			两种方式：即"=="运算符与equals()方法
				"=="运算符用于比较两个对象的内存地址值是否相等
				equals()方法用于比较两个对象的内容是否一致
		9.3.4 对象数组的使用
			两个步骤实现：
				声明类类型的数组变量，并用new分配内存空间给数组
				用New产生新的对象，并分配内存空间给它
			例如:
				Person p[];
				p = new Person[3];
				p[0] = new person();
				p[1] = new person();
				p[2] = new person();
			简写：
				Person p[] = new Person[3];
				//动态初始化
				for(int i=0;i<p.length;i++){
					p[i] = new Person();
				}
				//静态初始化
				Person p[] = {new Person(),new Person(),new Person()};
	9.4 类的属性			
		类的属性也称为字段或成员变量		
		9.4.1 属性的定义
			[public|protected|private|default][(static[final])|(final[static])] className prorotypeName
			属性定义规则：
				类的属性是变量
				类的属性的类型可以是基本类型，也可以是引用类型
				类的属性的命名规则，首单词的首字母小写，其余单词的首字母大写
		9.4.2 属性的使用
			类属性和对象属性的不同使用方法
	9.5 类的方法
		9.5.1 方法的定义
			type name(参数){
				//方法主体
			}
			type指定了由方法返回的数据类型，可以是任意有效的类型，包括创建的类类型
			如果方法没有返回值，则其返回类型必须是void
		9.5.2 方法的使用
		9.5.3 构造方法
			主要工作是帮助新创建的对象赋初值	
			特点：具有与类名相同的名称，没有返回值
			class Person{
				public Person()
				{
					
				}
			}
		9.5.4 构造方法的重载
			只要构造方法的参数个数不同或是类型不同，便可定义多个名称相同的构造方法
			注意：如果java程序中明确的声明了构造方法，那么默认的构造方法就不会被自动生成
			所有就必须声明一个无参构造方法，不然报错
		9.5.5 构造方法的私有	
		9.5.6 在类内部调用方法
			
			
		
		
		
		
		
		
		