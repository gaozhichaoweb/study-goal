java从入门到精通p201
第12章：关于类的专题研究
	Java中有一个比较特殊的类，就是Object类，他是所有类的父类
	12.1 Object类
		Java中任何一个类都是它的子类
		toString()方法，此方法是在打印对象时被调用的
			Person p = new Person();
			System.out.println(p);
			//实际上是去调用toString()方法
			System.out.println(p.toString())
	12.2 内部类
		在类内部可以定义成员变量和方法，也可以在类内部定义另一个类
		内部类在声明时，会破坏程序的结构，因此在开发中往往不建议使用
	12.3 匿名内部类
		内部类也可以继承一个抽象类或实现一个接口
	12.4 匿名对象
		匿名对象就是没有明确的声明的对象
		System.out.println(new Person().talk());
	12.5 方法
		static 方法内只能访问 static 成员变量(数据成员和方法成员)
		12.5.1 方法的参数与返回值
			如果方法有返回值，则在声明方法之前就必须指定返回值的数据类型
			如果有 参数要传递到方法内，则在方法的括号内必须填上该参数及其类型
		12.5.2 方法的重载
			在同一个类中允许同时存在一个以上的同名方法，只有它们的参数个数或类型不同即可
		12.5.3 将数组传递到方法里
			传递一维数组
				要传递一维数组到方法里，只要指明传入的参数是一个数组即可
				public static void large(int arr[])
			传递二维数组
				和传递一维数组类似，只要在方法里声明传入的参数是一个二维数组即可
				public static void large(int arr[][])
			返回数组的方法
				如果方法返回整数，则必须在声明时在方法的前面加上int关键字
				如果返回的是一维的整形数组，则必须在方法的前面加上int[]
				如果返回二维的整形数组，则应加上int[][]
		12.6 引用数据类型的传递
			Java中使用引用来取代C++中的指针
		12.7 覆写Object类中的equals方法
			Object类中有个一个方法equals用于比较对象是否相等，而此方法必须被覆写
			代码见p227
		12.8 接口对象的实例化
			接口是可以被实例化的，但是不能被直接实例化，只能通过其子类进行实例化
			使用接口实际上就是定义出了一个统一的标准
			实例参见p233更容易理解
		12.9 this关键字的使用
			this表示当前对象
		12.10 static关键字的使用
			在Java中，使用 static 关键字声明静态变量和方法
			12.10.1 静态变量
				用 static 声明的变量，称为静态变量
				用 static 关键字修饰类的属性后，则此属性就是公共属性，所有对象共享
				用 static 方式声明的属性，也可以用类名直接访问,也被称为"类属性"
				Person.city="china"
			12.10.2 静态方法
				用static 声明的方法也被称为"类方法"
			12.10.3 理解main()方法
				如果一个类要被Java解释器直接装载运行，这个类中必须有main()方法
				由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public
				由于Java虚拟机在执行main()方法时不必创建对象，所有该方法必须是 static
				该方法接受一个 string 类型的数组参数，该数组中保持执行Java命令时传递给所运行的类的参数
				项Java中传递参数命令
					java 类名称 参数1 参数2 参数3
			12.10.1 静态代码块	
				一个类可以使用不包含在任何方法体中的静态代码块，当类被载入时，静态代码块被执行，且只执行一次
				静态代码块经常用来进行类属性的初始化
				class Person{
					//此代码块会首先被执行
					static
					{
						System.out.prinln("yew");
					}
				}
		12.11 final关键字的使用
			final标记的类不能被继承
			final标记的方法不能被子类覆写
			final标记的变量即为常量，只能赋值一次
		12.12 instanceof关键字的使用
			可以用instanceof判断一个类是否实现了某个接口
			也可以用它来判断一个实例对象是否属于一个类